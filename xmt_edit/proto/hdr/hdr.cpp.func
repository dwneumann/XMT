{
#************************************************************************
#   $Version:$
#   Package	: xmt_edit
#   Synopsis	:
#   Purpose	: Perl block which, when eval'ed, prints the desired
# 		function header block for C++ functions.
#
#   Copyright (c) 1998	Neumann & Associates Information Systems Inc.
#   			legal.info@neumann-associates.com
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#   
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License. 
#************************************************************************

# customize the fields the way we want them before printing ...

# customize the synopsis
($n = $funcs[0]->{name}) =~ s/.*\:\://;
if ( $funcs[0]->{name} =~ /^$n\:\:$n/ ) 
{
    $funcs[0]->{proto} =~ s/^/new /;
}

# customize the return values
$r = {};
if ( $funcs[0]->{type} =~ /(void|delete)/ ) 
{ 
    $r->{val}	= "none";
    $r->{desc}	= "";
    push @rtnvals, $r;
}
elsif ( $funcs[0]->{type} =~ /boolean/ ) 
{ 
    $r->{val}	= "true";
    $r->{desc}	= "function completed successfully";
    push @rtnvals, $r;

    $r= {};
    $r->{val}	= "false";
    $r->{desc}	= "an error occurred and has been logged";
    push @rtnvals, $r;
}
elsif ( $funcs[0]->{proto} =~ /^new / ) 
{ 
    $r->{val}	= "*this";
    ($f	= $funcs[0]->{name}) =~ s/.*:://;
    $r->{desc}	= "a newly allocated $f object";
    push @rtnvals, $r;
}
else
{ 
    $r->{val}	= "<value>";
    $r->{desc}	= "<description>";
    push @rtnvals, $r;
}


print qq{
/************************************************************************
*   Synopsis:
*	$funcs[0]->{proto}
*
*   Purpose:
*	<purpose>
* 
*   Parameters: 
};

foreach $i ( 0 .. $#args )
{
    print qq{*\t$args[$i]->{type}\t$args[$i]->{name}\t: <meaning>\n};
}

print 
qq{* 
*   Values Returned: 
};

foreach $i ( 0 .. $#rtnvals )
{
    print qq{*\t$rtnvals[$i]->{val}\t: $rtnvals[$i]->{desc}\n};
}

print 
qq{*\n*   Exceptions Thrown:\n};

foreach $i ( 0 .. $#exceps )
{
    print qq{*\t$exceps[$i]->{type}\t: $exceps[$i]->{desc}\n};
}

print 
qq{* 
***********************************************************************/
$stdin};

}
