#!/bin/perl -w
#************************************************************************
#*   $Version:$
#*   Package	: xmt_timesht
#*   Synopsis	: timesht_cgi.pl
#*   Purpose	: CGI script which accepts input data using either the
#*		  GET or POST method, evaluates the parameter event,
#*		  performs the requested event (using additional supplied
#*		  parameters), and generates the appropriate response.
#*
#*	NOTE	: If adding/changing events, keep event names of the form
#*		  verb[_subject], or you'll have to grep for 'event_verb'
#*		  in ../proto/vhtml/* and fix what you just broke!
#*
#*  Copyright (c) 1998	Neumann & Associates Information Systems Inc.
#*  			legal.info@neumann-associates.com
#*  Licensed under the Apache License, Version 2.0 (the "License");
#*  you may not use this file except in compliance with the License.
#*  You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#*  
#*  Unless required by applicable law or agreed to in writing, software
#*  distributed under the License is distributed on an "AS IS" BASIS,
#*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#*  See the License for the specific language governing permissions and
#*  limitations under the License. 
#************************************************************************

package CGI_Timesht;
use strict 'vars';
use Env;
use Carp;
use CGI 'all';
use CGI::Carp qw(fatalsToBrowser);
use Timesht::SQL;
use Timesht::Timesht;
require( "timesht.pl" ); 

my ( $dbname, $event, $func );
$dbname		= "timesht";
$CGI_Timesht::q		= new CGI() || cgidie( $! );
$CGI_Timesht::vpath	= CGI::unescape( $CGI_Timesht::q->path_info ) 
		  if defined $CGI_Timesht::q->path_info;
$CGI_Timesht::q->autoEscape( undef );

#************************************************************************
# If the parameter 'ev' was not sent by the client, then
# we deduce the event from the URL.
# We then validate the client's cookie, & invoke the appropriate handler.
#************************************************************************
if ( !defined $CGI_Timesht::q->param( 'ev' ) ||
    ($event = $CGI_Timesht::q->param( 'ev' )) =~ /^\s*$/ )
{
    $event = defined( $CGI_Timesht::vpath ) ? 'load' : 'null' ;
}

$func = "ev_$event";
if ( $event eq 'register' || $event =~ /(submit_)?login/ )
{
    &$func($CGI_Timesht::q)	if (defined &$func);
}
else
{
    if ( defined $CGI_Timesht::q->cookie( 'timesht_auth' ) )
    {
	if ( validate_cookie($CGI_Timesht::q) )
	{
	    &$func($CGI_Timesht::q)	if (defined &$func);
	}
	else
	{
	    &serve( 'timesht_login_failed', 'timesht_login' ); # cookie expired
	}
    }
    else
    {
	&serve( 'timesht_login' );
    }
}
&cgidie();


#************************************************************************
# EVENT HANDLERS &ev_* : All event handlers take the single argument $o.
#************************************************************************
#************************************************************************
# ev_load($o): handle load event:
# serve the file specified in $CGI_Timesht::vpath.
#************************************************************************
sub ev_load
{
    my ($o) = @_;
    &serve($CGI_Timesht::vpath);
}

#************************************************************************
# ev_login($o): serve the login screen.
#************************************************************************
sub ev_login
{
    my ($o) = @_;
    &serve('timesht_login');
}

#************************************************************************
# ev_login($o): validate the credentials and serve the timesht_intro screen.
#************************************************************************
sub ev_submit_login
{
    my ($o) = @_;
    my (%auth, $auth_cookie, $buf);

    if ( !authenticate( $o->param('uname'), $o->param('passwd')))
    {
	&serve( 'timesht_login_failed' );
	return 0;
    }

    %auth = (
	'uname'	    => $o->param('uname'),  
	'passwd'    => $o->param('passwd'), 
    );
    $auth_cookie = $CGI_Timesht::q->cookie( -name=>'timesht_auth', -value=>\%auth );
    print $CGI_Timesht::q->header( -cookie => $auth_cookie );
    if ( open( TMP, "<../proto/html/timesht_intro.html" ) )
    {
	undef $/;
	$buf = <TMP>;
	close TMP;
	print $buf;
    }
    return 1;
}

#************************************************************************
# ev_load_query($o): handle load_query event:
# Load the query template referenced by $o
#************************************************************************
sub ev_load_query
{
    my ($o) = @_;
    my (@selections, $fn, $buf, $s);

    return &serve( '-err'=>"no query template", 'timesht_error' ) if 
	( !defined $o->param( 'query_tmpl' ));

    @selections = $o->param( 'query_tmpl' );
    $fn = "../proto/queries/" . $selections[0];

    open( TMPL, "<$fn" ) || cgidie( "$fn: $!" );
    undef $/;
    $buf = <TMPL>;
    close( TMPL ) || cgidie ( "$fn: $!" );
    $s = new Timesht::SQL( $buf ) || cgidie( $! );
    $buf = $s->prettyprint();
    $o->delete( 'query' );
    $o->param( -name=>'query', '-value'=>"$buf" );
    &serve( 'timesht_search' );
}

#************************************************************************
# ev_search($o): handle search event:
# Query DBMS for timeshts matching the specified criteria, and display 
# the results using the specified report template.
# Default query name and report name are 'default'
#************************************************************************
sub ev_search 
{
    my ($o) = @_;
    my $qry = ( defined $o->param('query') ? $o->param('query') 
    		: 'default'  );
    my $fmt = ( defined $o->param('report_fmt') ?  $o->param('report_fmt') 
    		: 'default'  ); 

    return &serve( '-err'=>"no query", 'timesht_error' ) if ( $qry =~ /^\s*$/ );
    return &serve( '-err'=>"not a query", 'timesht_error' ) if ( $qry !~ /^\s*select/i );

    &query( $qry, \@CGI_Timesht::query_results );
    &serve( "../proto/reports/$fmt" );
}

#************************************************************************
# ev_add_and_clause($o): handle add_and_clause event:
# add the clause specified in $o to the query being constructed
#************************************************************************
sub ev_add_and_clause 
{
    my ($o) = @_;
    construct_query( $o, 'AND' );
    &serve( 'timesht_search' );
}

#************************************************************************
# ev_add_or_clause($o): handle add_or_clause event:
# add the clause specified in $o to the query being constructed
#************************************************************************
sub ev_add_or_clause 
{
    my ($o) = @_;
    construct_query( $o, 'OR' );
    &serve( 'timesht_search' );
}


#************************************************************************
# GENERIC ROUTINES ...
#************************************************************************
#************************************************************************
# cgidie($msg): disconnect from the dbms, display msg, & exit
#************************************************************************
sub cgidie
{
    my ($msg) = @_;
    $CGI_Timesht::dbh->disconnect	if ( defined $CGI_Timesht::dbh );
    undef $CGI_Timesht::dbh;
    undef $CGI_Timesht::sth;
    confess( $msg . "\n" ) if ( defined $msg && $msg !~ /^\s*$/ );
    exists $ENV{'MOD_PERL'} ? Apache::exit() : exit 0;
}

#************************************************************************
# validate_cookie($o): Return true if the cookie sent by the client
# matches a valid username/password combination from the DDB,
# & return false otherwise.
#************************************************************************
sub validate_cookie
{
    my ($o) = @_;
    my (%auth);

    %auth = $CGI_Timesht::q->cookie( 'timesht_auth' );
    return ( &authenticate(  $auth{uname},  $auth{passwd} ));
}

#************************************************************************
# authenticate($unm, $pswd): Verify the user-supplied username and password
# against those stored in the database.  Return 1 if they match,
# & 0 otherwise.
#************************************************************************
sub authenticate
{
    my ($unm, $pswd) = @_;
    my ($stmt, @results);

    return 1;

    $stmt = "select pers_passwd from Persons where pers_uname='$unm'";
    &query( $stmt, \@results );
    if ( $#results < 0 || crypt( $pswd, $results[0]{pers_passwd} ) 
	ne $results[0]{pers_passwd} )
    {
	return 0;
    }
    return 1;
}


#************************************************************************
# query($stmt, $aryref): return the results of the query <$stmt> in 
# the array referenced by <$$aryref>.
#************************************************************************
sub query
{
    my ($stmt, $aryref) = @_;
    my ($hashref);
    $CGI_Timesht::sth = $CGI_Timesht::dbh->prepare( $stmt) || cgidie( "$DBI::errstr" );
    $CGI_Timesht::sth->execute || cgidie( "$DBI::errstr" );
    while ( $hashref = $CGI_Timesht::sth->fetchrow_hashref )
    {
	push( @$aryref, $hashref );
    }

    #********************************************************************
    # finish the statement but do not undef $sth. 
    # The caller will reference the underlying data structures.
    #********************************************************************
    $CGI_Timesht::sth->finish; 
}

#************************************************************************
# construct_query($o, $c):  add the clause specified in $o to the
# query being constructed, using the conjunction specified by $c.
#************************************************************************
sub construct_query 
{
    my ($o, $c) = @_;
    my ($s, $q, $buf);

    $q = defined $o->param( 'query' ) && $o->param( 'query' ) !~ /^\s*$/ 
	? $o->param( 'query' ) : 'select distinct oid,* from where';
    $s = new Timesht::SQL( $q ) || cgidie( $! );
    $buf = $s->add_clause($c, $o->param('field_name'),
		$o->param('field_opr'), $o->param('field_value'));
    $buf = $s->prettyprint();
    $o->delete( 'query' );
    $o->param( -name=>'query', '-value'=>"$buf" );
}

#************************************************************************
# serve($option, ..., @fns): eval the files @fns. Paths are relative to  the
# proto/vhtml directory by default.   If the optional argument '-nohdr'
# is passed, the html header is not generated.  If the optional arguments
# '-err' => "some error string" are passed, the CGI object $CGI_Timesht::q
# has the param 'timesht_err' set to $err before each $fn is eval'ed.
#************************************************************************
sub serve
{
    my (@fns, $fn, $func, $buf);
    my $dohdr = 1;

    while ( @_ )
    {
	if ( $_[0] eq "-nohdr" ) 
	{ 
	    $dohdr = 0; 
	    shift @_; 
	}
	elsif ( $_[0] eq "-err" ) 
	{ 
	    shift @_; 
	    $CGI_Timesht::q->param(-name=>'timesht_err', '-value'=> shift @_ ); 
	}
	else { @fns = @_; undef @_; }
    }



    print $CGI_Timesht::q->header() if defined $dohdr;

    foreach $fn ( @fns )
    {
	$fn =~ s{^/*}{};
	$fn =~ s{^([^/]*)$}{../proto/vhtml/$1};

	# debugging is easier if we copy the eval block into this
	# namespace as a subroutine with the name &$fn (with all
	# characters that would be illegal in an identifier replaced with
	# underscores).  So, if such a subroutine exists, we call it,
	# rather than evaling the file.
	($func = $fn) =~ s{.*/}{};
	$func  =~ s/[^\w]/_/g;
	if ( defined &$func )
	{
	    &$func();
	}
	else
	{
	    open( TMPL, "<$fn" ) || cgidie( "$fn: $!" );
	    undef $/;
	    $buf = <TMPL>;
	    close( TMPL ) || cgidie ( "$fn: $!" );
	    eval $buf;
	}
    }
}


#************************************************************************
# functions to aid in debugging ...
#************************************************************************
#************************************************************************
# dump_state($o1, $o2, ...): dump the state contained in each CGI object
#************************************************************************
sub dump_state
{
    my @objs = @_;
    my ($i, $e, %auth);
    print $objs[0]->header();
    print $objs[0]->start_html();
    foreach $i ( 0 .. $#objs )
    {
	print "\n<H3> Dump of \$obj[$i] </H3>\n";
	print $objs[$i]->dump();
	%auth = $objs[$i]->cookie( 'timesht_auth' );
	print "COOKIE timesht_auth =\n";
	    print '$auth{uname}' . "$auth{uname} \n";
	    print '$auth{passwd}' . "$auth{passwd} \n";
    }

    print "\n<H3> Environment Variables</H3>\n";
    foreach $e ( keys %ENV )
    {
	print "<BR><B>$e</B> = '" . $ENV{$e} . "'\n";
    }
    print $objs[0]->end_html();
}

