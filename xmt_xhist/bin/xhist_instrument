#!/bin/perl -w
#************************************************************************
#   $Version:$
#   Package	: xmt_cm
#   Purpose	: instrument files for execution tracing 
#		  This is achieved by appending a write to a circular buffer after each
#		  semicolon terminating an executable statment.
#                 --xhist produces a map file at instrumentation time,
#                 for use by xhist_report to reconstruct the collected
#                 execution trace and present it in human-readable form.
#                 The map file is specified by
#		  --xhist_db=<pathname>
#
#   Synopsis	: xhist_instrument [<options>] [file]
#   	 --help		print help message & exit.
#   	 --verbose	list keyword labels with their expanded values to stdout.
#	 --fname=<pathspec>	read contents of file from STDIN but use <pathspec>
#			as the file name for instrumentation purposes
#	 --map=pathname	write execution history filename map to <pathname>.
#	 --unxhist	unxhist (i.e. clean) xhist instrumentation found in stdin, 
#			and write cleaned data stream to stdout.
#
#  Copyright 2018 Visionary Research Inc.   All rights reserved.
#  			legal@visionary-research.com
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#  
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License. 
#************************************************************************

use strict;

# perl expects to find the required XMT modules installed into
# the standard place that CPAN modules are installed:  
# this is found by running perl -V:installsitelib
# to instead use a develop version of the XMT::Xhist module
# uncomment the following line.
BEGIN {unshift(@INC, "$ENV{XMTXHIST}/bin");}
use XMT::Xhist;

use Getopt::Long;
use Path::Tiny qw(path);
use POSIX qw(strftime);

(my $pgmname = $0) =~ s{.*/}{};	# rootname of executed script
# construct the help message
my $help_msg = sprintf( <<__END__ );
$pgmname [<options>] [file]
  --verbose     list keyword labels with their expanded values to stdout
  --fname=<pathspec>	read contents of file from STDIN but use <pathspec>
                as the file name in the mapfile
  --map=pathname   write execution history filename map to <pathname>
  --unxhist     unxhist (i.e. clean) xhist instrumentation found in stdin, 
                and write cleaned data stream to stdout.
__END__

# parse commandline options
my %opt = ();
GetOptions( \%opt, "help", "verbose", "unxhist", "map=s", "fname=s") 
	    or die $help_msg;

die "$help_msg" if defined $opt{'help'};
    
my $inbuf;
my $pathname;
my $ext = "c";	# default file extension for lexer

# if a filename was given on the commandline, read its contents, 
# otherwise read from stdin & use the --fname option as the filename.
if (scalar(@ARGV) >= 1)
{
    $pathname = $ARGV[0];
    ($ext = $pathname) =~ s/.*\.//;		# get file extension
    $inbuf = path($pathname)->slurp;		# slurp entire file
}
else
{
    $pathname = $opt{'fname'} if defined $opt{'fname'};
    $inbuf = do { local $/ = undef; <STDIN> };	# slurp stdin
}

my $xh = XMT::Xhist::new($pathname, \$inbuf);	
if ( ! defined $opt{'unxhist'} )
{
	$inbuf = $xh->instrument(); 
	XMT::Xhist::printmap($opt{'map'});	
}
else
{
    $inbuf = $xh->uninstrument();
}
print STDOUT $inbuf;

