#!/usr/bin/env perl
#************************************************************************
#   $Version:$
#   Package	: metrics
#   Purpose	: commandline entry point to metrics database.
#                 Performs the specified <action> on metrics objects.
#
#   Copyright (c) 1998	Neumann & Associates Information Systems Inc.
#   			legal.info@neumann-associates.com
#************************************************************************

use English;
use Env;
use Fcntl;
use Getopt::Long;
use lib $ENV{XMTMETRICS}.'/bin'; # specifies where to find local libs
use Metrics::Task;
use Metrics::Assignment;
require "metricsDB.pl";

my $pgmname;
($pgmname	= $0) =~ s{.*/}{};
%::actions = (
  'insertTask'	=> { 
	'defect'	=> { format => 's',	reqd => true },
	'filename'	=> { format => 's',	reqd => true },
	'revision'	=> { format => 's',	reqd => true } },
  'updateTask'	=> { 
	'oid'		=> { format => 's',	reqd => true },
	'defect'	=> { format => 's',	reqd => false },
	'filename'	=> { format => 's',	reqd => false },
	'revision'	=> { format => 's',	reqd => false } },
  'deleteTask'		 => { 
	'oid'		=> { format => 's',	reqd => true } },

  'insertAssignment'	=> { 
	'id'		=> { format => 's',	reqd => true },
	'severity'	=> { format => 's',	reqd => false },
	'fc'		=> { format => 's',	reqd => false },
	'product'	=> { format => 's',	reqd => false },
	'subject'	=> { format => 's',	reqd => true } },
  'updateAssignment'	=> { 
	'oid'		=> { format => 's',	reqd => true },
	'id'		=> { format => 's',	reqd => false },
	'severity'	=> { format => 's',	reqd => false },
	'fc'		=> { format => 's',	reqd => false },
	'product'	=> { format => 's',	reqd => false },
	'subject'	=> { format => 's',	reqd => false } },
  'deleteAssignment'	=> { 
	'oid'		=> { format => 's',	reqd => true } },

  'report' 		=> { 
	'query'		=> { format => 's',	reqd => false },
	'rpt'		=> { format => 's',	reqd => false } },
    );

%::opts	= ();
my (@getOptArray, %uniqueOpts);

# construct an array of unique option names & formats
foreach $action (keys %::actions)
{
    foreach $k (keys %{$::actions{$action}})
    {
	if (!defined($uniqueOpts{$k}))
	{
	    $uniqueOpts{$k} = $::actions{$action}{$k}{'format'}; 
	    push(@getOptArray, sprintf("%s=%s", 
		$k, $::actions{$action}{$k}{'format'}));
	}
    }
}

# die if we detected incorrect usage
my %taintedOpts;
GetOptions(\%taintedOpts, @getOptArray) || usage();
usage() if $#ARGV <0;
$::action   = shift @ARGV;
usage() if ( !defined &$::action );

# untaint (potentially malicious code in) options
foreach $k (keys %taintedOpts)
{
    ($k =~ /^(\w+)$/) and $k = $1;
    (($taintedOpts{$k} =~ /^([^;\`\$<>\s]+)$/) and $::opts{$k} = $1 )
	or die("insecure data disallowed for option $k\n");
}

# ensure that all required options for the specified action are present
foreach $k (keys %{$::actions{$::action}})
{
    die( sprintf("%s requires the -%s option\n", $::action, $k))
	if ( $::actions{$::action}{$k}{'reqd'} && !defined $::opts{$k} );
}
# ensure that all options specified for the specified action are valid
foreach $k ( keys %::opts )
{
    return( die( "option '$k' is invalid for action '$::action'" ))
	if ( !defined $::actions{$::action}{$k} );
}

#********************************************************************
# connect to the database and invoke the appropriate action handler
#********************************************************************
MetricsDB::connect('metrics', $ENV{'USER'}, '') 
    || die('database connection failed\n');
&$::action();
MetricsDB::dbdie(); # exit cleanly


#********************************************************************
# generic routines
#********************************************************************
sub usage
{
    my ( $action, $k );
    print "usage: $pgmname <action> [options]
    Valid actions and their options are:\n";

    foreach $action (sort keys %::actions)
    {
	my ($verb, $tbl);
	($verb=$action) =~ s/[A-Z].*$//;
	($tbl=$action)  =~ s/^[a-z]*//;
	if ($verb !~ /^report$/)
	{
	    printf("\t%s\t: %s the specified %s record\n", 
	    	$action, $verb, $tbl);
	}
	else
	{
	    printf("\t%s\t: %s\n", $verb,
		"execute the specified query and produce the specified report");
	}

	foreach $k (keys %{$::actions{$action}})
	{
	    printf("\t\t\t[-%s <value>]\n", $k );
	}
    }
    exit;
}

#********************************************************************
# action handlers:
#********************************************************************
sub insertTask
{
    $o = new Metrics::Task() || MetricsDB::dbdie;
    $o->{wbs}		= $::opts{wbs}		if defined $::opts{wbs};
    $o->{proj}		= $::opts{proj}		if defined $::opts{proj};
    $o->{task_name}	= $::opts{task_name}	if defined $::opts{task_name};
    $o->{est_effort}	= $::opts{est_effort}	if defined $::opts{est_effort};
    $o->{act_effort}	= $::opts{act_effort}	if defined $::opts{act_effort};
    $o->{est_size}	= $::opts{est_size}	if defined $::opts{est_size};
    $o->{act_size}	= $::opts{act_size}	if defined $::opts{act_size};
    $o->{size_units}	= $::opts{size_units}	if defined $::opts{size_units};
    $o->{est_start}	= $::opts{est_start}	if defined $::opts{est_start};
    $o->{est_end}	= $::opts{est_end}	if defined $::opts{est_end};
    $o->{act_start}	= $::opts{act_start}	if defined $::opts{act_start};
    $o->{act_end}	= $::opts{act_end}	if defined $::opts{act_end};
    $o->{est_prod}	= $::opts{est_prod}	if defined $::opts{est_prod};
    $o->{act_prod}	= $::opts{act_prod}	if defined $::opts{act_prod};
    $o->{remarks}	= $::opts{remarks}	if defined $::opts{remarks};

    $o->update;
}

sub updateTask
{
    $o = new Metrics::Task($::opts{oid}) || MetricsDB::dbdie;
    $o->{proj}		= $::opts{proj}		if defined $::opts{proj};
    $o->{task_name}	= $::opts{task_name}	if defined $::opts{task_name};
    $o->{est_effort}	= $::opts{est_effort}	if defined $::opts{est_effort};
    $o->{act_effort}	= $::opts{act_effort}	if defined $::opts{act_effort};
    $o->{est_size}	= $::opts{est_size}	if defined $::opts{est_size};
    $o->{act_size}	= $::opts{act_size}	if defined $::opts{act_size};
    $o->{size_units}	= $::opts{size_units}	if defined $::opts{size_units};
    $o->{est_start}	= $::opts{est_start}	if defined $::opts{est_start};
    $o->{est_end}	= $::opts{est_end}	if defined $::opts{est_end};
    $o->{act_start}	= $::opts{act_start}	if defined $::opts{act_start};
    $o->{act_end}	= $::opts{act_end}	if defined $::opts{act_end};
    $o->{est_prod}	= $::opts{est_prod}	if defined $::opts{est_prod};
    $o->{act_prod}	= $::opts{act_prod}	if defined $::opts{act_prod};
    $o->{remarks}	= $::opts{remarks}	if defined $::opts{remarks};

    $o->update;
}

sub deleteTask
{
    $o = new Metrics::Task($::opts{oid}) || MetricsDB::dbdie;
    $o->delete;
}

sub insertAssignment
{
    $o = new Metrics::Assignment() || MetricsDB::dbdie;
    $o->{wbs}		= $::opts{wbs}		if defined $::opts{wbs};
    $o->{uname}		= $::opts{uname}	if defined $::opts{uname};
    $o->{est_effort}	= $::opts{est_effort}	if defined $::opts{est_effort};
    $o->{act_effort}	= $::opts{act_effort}	if defined $::opts{act_effort};
    $o->{est_size}	= $::opts{est_size}	if defined $::opts{est_size};
    $o->{act_size}	= $::opts{act_size}	if defined $::opts{act_size};
    $o->{est_start}	= $::opts{est_start}	if defined $::opts{est_start};
    $o->{est_end}	= $::opts{est_end}	if defined $::opts{est_end};
    $o->{act_start}	= $::opts{act_start}	if defined $::opts{act_start};
    $o->{act_end}	= $::opts{act_end}	if defined $::opts{act_end};
    $o->{est_prod}	= $::opts{est_prod}	if defined $::opts{est_prod};
    $o->{act_prod}	= $::opts{act_prod}	if defined $::opts{act_prod};
    $o->{efficiency}	= $::opts{efficiency}	if defined $::opts{efficiency};
    $o->{remarks}	= $::opts{remarks}	if defined $::opts{remarks};

    $o->update;
}

sub updateAssignment
{
    $o = new Metrics::Assignment($::opts{oid}) || MetricsDB::dbdie;
    $o->{est_effort}	= $::opts{est_effort}	if defined $::opts{est_effort};
    $o->{act_effort}	= $::opts{act_effort}	if defined $::opts{act_effort};
    $o->{est_size}	= $::opts{est_size}	if defined $::opts{est_size};
    $o->{act_size}	= $::opts{act_size}	if defined $::opts{act_size};
    $o->{est_end}	= $::opts{est_end}	if defined $::opts{est_end};
    $o->{act_start}	= $::opts{act_start}	if defined $::opts{act_start};
    $o->{act_end}	= $::opts{act_end}	if defined $::opts{act_end};
    $o->{est_prod}	= $::opts{est_prod}	if defined $::opts{est_prod};
    $o->{act_prod}	= $::opts{act_prod}	if defined $::opts{act_prod};
    $o->{efficiency}	= $::opts{efficiency}	if defined $::opts{efficiency};
    $o->{remarks}	= $::opts{remarks}	if defined $::opts{remarks};

    $o->update;
}

sub deleteAssignment
{
    $o = new Metrics::Assignment($::opts{oid}) || MetricsDB::dbdie;
    $o->delete;
}

sub report
{
    $stmt = MetricsDB::loadquery($::opts{qry}) || Metrics::dbdie($!);
    MetricsDB::query($stmt) || Metrics::dbdie($!);
    MetricsDB::format_report($::opts{rpt});
}

