#!/usr/bin/env perl
#************************************************************************
#   $Version:$
#   Package	: xmt_cm
#   Purpose	: filter git blobs on checkout & commit, including:
#		  1. expand (smudge) or unexpand (clean) keywords,
#		  2. instrument or uninstrument files for xhist execution tracing,
#		  3. instrument or uninstrument files for xtest testing.
#
#                 If a filename is specified on the commandline, input is read
#                 from the named file, otherwise input is read from stdin &
#                 written to stdout.  
#		  (If reading from stdin, the --fname option is needed so instrumentation 
#		  can identify the language of the source copde to be instrumented).
#		  Alternatively, if the --process flag is specified, 
#		  git_fiter operates  as a long-running-process
#                 reading/writing Git Filter Protocol v2. 
#
#		  --list:
#		  If the --listoption is specified, git_filter just prints 
#		  keyword names & values to stdout, to show what values each keyword
#		  would be expanded to, if the --expand option had been specified.
#		
#		--expand && --unexpand :
#		  Expands (smudge) or unexpand (clean) keywords 
#		  so that keywords of the form:	$keyword:$ 
#		  are transformed into:		$keyword: value $
#		  and vice-versa.
#		  Keywords are as documented in "git log PRETTY FORMAT format:<string>"
#		  The compound "Version" keyword expands to a fully qualified 
#		  version identifier suitable for release identification:
#		  	 $ Version: <Tag>-<BuildNum> [<Branch>] $ 
#		  The compound "XhistMap" keyword expands to a fully qualified 
#		  pathname suitable for use as an xhist_map filename:
#		  	 $ XhistMap: /tmp/<Tag>-<BuildNum>-<Branch>.xmap $ 
#
#		--xhist && --unxhist :
#		--funcs_only
#		  instruments files to capture execution history by xhist.
#		  See xmt_xhist/README for explanation.
#
#		--xtest && --unxtest :
#		  instruments files to facilitate whitebox testing.
#		  See xmt_xtest/README for explanation.
#
#   Synopsis	: git_filter [<options>] [file]
#   	 --help		print help message & exit.
#	 --expand=<branchspec> only if in a branch matching regex pattern <branchspec>,
#	  	 	expand (i.e. smudge) all keywords of the form \$Keyword:\$ 
#                       found in stdin and write substituted data stream to stdout.
#                       (e.g.  git_filter --expand="release|test" )
#	 --expand	is equivalent to --expand='.*'
#	 --unexpand=<branchspec> only if in a branch matching regex pattern <branchspec>,
#	 		unexpand (i.e. clean) all keyword values found in stdin, 
#			and write cleaned data stream to stdout.
#	 --unexpand	is equivalent to --unexpand='.*'
#   	 --list		print expanded keyword values to stdout; do no substitution.
#   	 --verbose	list keyword labels & filenames to stdout.
#	 --binary       force substitutions in binary files; 
#			by defualt substitution only occurs in ascii files.
#	 --process      operate as a git long running process using Git filter protocol v2.
#	 --fname=<pathspec>	read contents of file from STDIN but use <pathspec>
#			as the file name for instrumentation purposes.
#	 --xhist=<branchspec> only if in a branch matching regex pattern <branchspec>,
#	 		instrument files for execution history capture on checkout.
#	 --xhist	is equivalent to --xhist='.*'
#	 --funcs_only	add xhist instrumentation to function calls only`
#	 --xhist_map=pathname	write execution history filename map to <pathname>.
#	 --xtest=<branchspec> only if in a branch matching regex pattern <branchspec>,
#	 		instrument files for whitebox test on checkout.
#	 --xtest	is equivalent to --xtest='.*'
#	 --unxhist=<branchspec> only if in a branch matching regex pattern <branchspec>,
#	 		unxhist (i.e. clean) xhist instrumentation found in stdin, 
#			and write cleaned data stream to stdout.
#	 --unxhist	is equivalent to --unxhist='.*'
#	 --unxtest=<branchspec> only if in a branch matching regex pattern <branchspec>,
#	 		uninstrument (i.e. clean) xtest instrumentation found in stdin, 
#			and write cleaned data stream to stdout.
#	 --unxtest	is equivalent to --unxtest='.*'
#	 --debug	when used with --process, write packet trace log to /tmp/git_filter.log
#
#  Copyright 2018 Visionary Research Inc.   All rights reserved.
#  			legal@visionary-research.com
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#  
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License. 
#************************************************************************

use strict;

# perl expects to find the required XMT modules installed into
# the standard place where CPAN modules are installed.
# this is found by running perl -V:installsitelib
# To use the develop version of the XMT modules uncomment the following lines:
BEGIN {unshift(@INC, "$ENV{XMTCM}/bin");}
BEGIN {unshift(@INC, "$ENV{XMTXHIST}/bin");}
BEGIN {unshift(@INC, "$ENV{XMTXTEST}/bin");}
use XMT::Xkeyword;
use XMT::Xhist;
use XMT::Xtest;

use Getopt::Long;
use Path::Tiny qw(path);

($::pgmname = $0) =~ s{.*/}{};	# rootname of executed script

# construct the help message
my $help_msg = sprintf( <<__END__, join("\n                ", sort keys(%XMT::Xkeyword::kw)) );
$::pgmname [<options>] [file]
  --list        print all recognized keyword values to stdout
  --list [keyword,keyword, ...]  print specified keyword values to stdout
                Recognized keywords include: 
                %s
  --help        print help message & exit.
  --expand=<branchspec> only if in a branch matching regex pattern <branchspec>,
                expand (i.e. smudge) all keywords of the form \$Keyword:\$ 
                found in stdin and write substituted data stream to stdout.
                (e.g.  git_filter --expand="release|test" )
  --expand      is equivalent to --expand='.*'
  --unexpand=<branchspec> only if in a branch matching regex pattern <branchspec>,
                unexpand (i.e. clean) all keyword values found in stdin, 
                and write cleaned data stream to stdout.
  --unexpand    is equivalent to --unexpand='.*'
  --verbose     list keyword labels & filenames to stdout.
  --binary       force substitutions in binary files; 
                by defualt substitution only occurs in ascii files.
  --process      operate as a git long running process using Git filter protocol v2.
  --fname=<pathspec>    read contents of file from STDIN but use <pathspec>
                as the file name for instrumentation purposes.
  --xhist=<branchspec> only if in a branch matching regex pattern <branchspec>,
                instrument files for execution history capture on checkout.
  --xhist       is equivalent to --xhist='.*'
  --funcs_only  add xhist instrumentation to function calls only`
  --xhist_map=pathname  write execution history filename map to <pathname>.
  --xtest=<branchspec> only if in a branch matching regex pattern <branchspec>,
                instrument files for whitebox test on checkout.
  --xtest       is equivalent to --xtest='.*'
  --unxhist=<branchspec> only if in a branch matching regex pattern <branchspec>,
                unxhist (i.e. clean) xhist instrumentation found in stdin, 
                and write cleaned data stream to stdout.
  --unxhist     is equivalent to --unxhist='.*'
  --unxtest=<branchspec> only if in a branch matching regex pattern <branchspec>,
                uninstrument (i.e. clean) xtest instrumentation found in stdin, 
                and write cleaned data stream to stdout.
  --unxtest     is equivalent to --unxtest='.*'
  --debug       when used with --process, write packet trace log to /tmp/git_filter.log
__END__

# parse commandline options
my %opt = ();
GetOptions( \%opt, "help", "verbose", "list:s@", "binary", "process", "debug", 
	    "expand:s", "unexpand:s", 
	    "xhist:s", "unxhist:s", "funcs_only", "xhist_map=s", "fname=s",
	    "xtest:s", "unxtest:s" ) 
	    or die $help_msg;

# at least one action must be specified.
# all other args are optional.
die "$help_msg" if defined $opt{'help'};
my @actions = map { /expand|unexpand|list|xhist|unxhist|xtest|unxtest/ ? $_ : () } keys %opt;
die "$help_msg" if scalar(@actions) < 1;

## list keyword values if any were requested
if (defined $opt{'list'})
{
    my $xk = XMT::Xkeyword::new(\%opt)	or die "$help_msg";
    $xk->printlist();
    exit 0;  # we're done.
}

# massage other options
foreach my $o ('expand', 'unexpand', 'xhist', 'unxhist','xtest', 'unxtest')
{
    if (defined $opt{$o} && length($opt{$o})==0 ) # option specified with no branchspec 
    {
        $opt{$o} = '.';			    # option applies to all branches
    }
}

#  open the filehandle to the LOG file for debug logging.
#  Currently the dbg_print() function is only called from protocol_main() 
#  but there's no reason it couldn't be called from standalone_main() as well.
if (defined $opt{'debug'})
{
    my $f = "/tmp/$::pgmname.log";
    open( LOG, ">$f" ) or  die "$f: $!\n";
}

## if we reach here then we are performing an action on the input,
## operating either in standalone mode or git-filter-protocol mode.
if (defined $opt{'process'})
{
    protocol_main();
}
else
{
    standalone_main();
}
exit 0;  # we're done.


#************************************************************************
# standalone_main: main processing loop for standalone filter mode
#************************************************************************
sub standalone_main
{
    my ($xk, $xh, $xt);

    # if a filename was given on the commandline, read its contents, 
    # otherwise read from stdin & use the --fname option as the filename.
    if (scalar(@ARGV) >= 1)
    {
	$opt{fname} = $ARGV[0];
	$opt{srcbuf} = path($opt{fname})->slurp;		# slurp entire file
    }
    else
    {
	$opt{srcbuf} = do { local $/ = undef; <STDIN> };	# slurp stdin
    }
    my $is_ascii = ! ($opt{srcbuf} =~ /[[:^ascii:]]/);	# check for non-ascii chars


    ## perform substitutions & write the output.
    if ($is_ascii || defined $opt{'binary'})
    {
	# constructor needed here to build $XMT::Xkeyword::kw values
	# that we test against below
	$xk = XMT::Xkeyword::new(\%opt)	or die "$help_msg";

	# XTEST FIRST.
	# do xtest instrumentation if we are in a branch specified for instrumentation.
	if ( defined $opt{'xtest'} 
	    and $XMT::Xkeyword::kw{'Branch'}{val} =~ /$opt{'xtest'}/ )
	{
	    printf(STDERR "%s: xtest %s\n", $::pgmname, $opt{fname}) if defined $opt{verbose};
	    $xt = XMT::Xtest::new(\%opt)	or die "$help_msg";
	    $opt{srcbuf} = $xt->instrument();
	}
	elsif ( defined $opt{'unxtest'} 
	    and $XMT::Xkeyword::kw{'Branch'}{val} =~ /$opt{'unxtest'}/ )
	{
	    printf(STDERR "%s: unxtest %s\n", $::pgmname, $opt{fname}) if defined $opt{verbose};
	    $xt = XMT::Xtest::new(\%opt)	or die "$help_msg";
	    $opt{srcbuf} = $xt->uninstrument();
	}

	# XHIST SECOND.
	# do xhist instrumentation if we are in a branch specified for instrumentation.
	if ( defined $opt{'xhist'} 
	    and $XMT::Xkeyword::kw{'Branch'}{val} =~ /$opt{'xhist'}/ )
	{
	    printf(STDERR "%s: xhist %s\n", $::pgmname, $opt{fname}) if defined $opt{verbose};
	    $xh = XMT::Xhist::new(\%opt)	or die "$help_msg";
	    $opt{srcbuf} = $xh->instrument();
	    $xh->printmap();	
	}
	elsif ( defined $opt{'unxhist'} 
	    and $XMT::Xkeyword::kw{'Branch'}{val} =~ /$opt{'unxhist'}/ )
	{
	    printf(STDERR "%s: unxhist %s\n", $::pgmname, $opt{fname}) if defined $opt{verbose};
	    $xh = XMT::Xhist::new(\%opt)	or die "$help_msg";
	    $opt{srcbuf} = $xh->uninstrument();
	}

	# KEYWORD EXPANSION LAST so that instrumentation code can include keywords.
	# do keyword expansion if we are in a branch specified for keyword expansion.
	if ( defined $opt{'expand'}  
	    and $XMT::Xkeyword::kw{'Branch'}{val} =~ /$opt{'expand'}/ )
	{
	    printf(STDERR "%s: expand %s\n", $::pgmname, $opt{fname}) if defined $opt{verbose};
	    $xk = XMT::Xkeyword::new(\%opt)	or die "$help_msg";
	    $opt{srcbuf} = $xk->expand();
	}
	elsif (defined $opt{'unexpand'}
	    and $XMT::Xkeyword::kw{'Branch'}{val} =~ /$opt{'unexpand'}/ )
	{
	    printf(STDERR "%s: unexpand %s\n", $::pgmname, $opt{fname}) if defined $opt{verbose};
	    $xk = XMT::Xkeyword::new(\%opt)	or die "$help_msg";
	    $opt{srcbuf} = $xk->unexpand();
	}
    }
    print STDOUT $opt{srcbuf};
}

#************************************************************************
# the following code implementing the git filter protocol v2 is adapted from 
# https://github.com/git/git/blob/master/contrib/long-running-filter/example.pl
# Credit to the authors.
#************************************************************************
sub protocol_main
{
    my $MAX_PACKET_CONTENT_SIZE = 65516;
    my ($rc, $str);
    my ($command, $packet);
    my ($xk, $xh, $xt);

    # receive handshake
    ($rc, $str) = packet_read(); chomp($str);
    die "error: expected 'git-filter-client', got $str" 
    	if ( $rc != 0 || $str ne "git-filter-client" );

    ($rc, $str) = packet_read(); chomp($str);
    die "error: expected 'version=2', got $str"	
	if ( $rc != 0 || $str ne "version=2" );         

    while ( (($rc, $str) = packet_read()) && $rc == 0 ) { ; }	# ignore additional versions

    # send response
    packet_txt_write("git-filter-server");
    packet_txt_write("version=2");
    packet_flush();

    #  receive capabilities
    ($rc, $str) = packet_read(); chomp($str);
    die "error: expected 'capability=clean', got $str"	
    	if ( $rc != 0 || $str ne "capability=clean" );         
    ($rc, $str) = packet_read(); chomp($str);
    die "error: expected 'capability=smudge', got $str"	
    	if ( $rc != 0 || $str ne "capability=smudge" );         
    while ( (($rc, $str) = packet_read()) && $rc == 0 ) { ; }	# ignore additional capabilities

    # send response
    packet_txt_write("capability=clean");
    packet_txt_write("capability=smudge");
    packet_flush();

    # receive command & data; perform filter & send response
    while (1) 
    {
	($rc, $command)  = packet_read(); chomp($command);
	$command  =~ s/command=//;
	($rc, $opt{fname}) = packet_read(); chomp($opt{fname});
	$opt{fname} =~ s/pathname=//;
	die "bad pathname $opt{fname}" if ( $opt{fname} eq "" );

	packet_read();	# "flush" packet 0000 follows command
	$opt{srcbuf} = "";
	binmode(STDIN);
	my $done = 0;
	my $fragment = '';
	while ( !$done ) # handle packet fragmentation 
	{
	    ($done, $fragment) = packet_read();
	    $opt{srcbuf} .= $fragment;
	}

	# entire buffer has been read.  Now do the command.
	if ( $command =~ /smudge/ ) 
	{
	    # need this here to populate XMT::Xkeyword::kw
	    $xk = XMT::Xkeyword::new(\%opt)		or die "$help_msg";

	    # XTEST FIRST.
	    # do xtest instrumentation if we are in a branch specified for instrumentation.
	    if ( defined $opt{'xtest'} 
	    	 and $XMT::Xkeyword::kw{'Branch'}{val} =~ /$opt{'xtest'}/ )
	    {
		$xt = XMT::Xtest::new(\%opt)		or die "$help_msg";
		$opt{srcbuf} = $xt->instrument();
	    }

	    # XHIST SECOND.
	    # do xhist instrumentation if we are in a branch specified for instrumentation.
	    if (defined $opt{'xhist'}
	    	and $XMT::Xkeyword::kw{'Branch'}{val} =~ /$opt{'xhist'}/ )
	    {
		$xh = XMT::Xhist::new(\%opt)		or die "$help_msg";
		$opt{srcbuf} = $xh->instrument();
	    }

	    # KEYWORD EXPANSION LAST so that instrumentation code can include keywords.
	    # do keyword expansion if we are in a branch specified for keyword expansion.
	    if ( defined $opt{'expand'}  
	    	 and $XMT::Xkeyword::kw{'Branch'}{val} =~ /$opt{'expand'}/ )
	    {
		#constructor already called
		$opt{srcbuf} = $xk->expand();
	    }
	}
	elsif ( $command =~ /clean/ ) 
	{
	    # need this here to populate XMT::Xkeyword::kw
	    $xk = XMT::Xkeyword::new(\%opt)		or die "$help_msg";

	    # XTEST FIRST.
	    if ( defined $opt{'unxtest'} 
		and $XMT::Xkeyword::kw{'Branch'}{val} =~ /$opt{'unxtest'}/ )
	    {
		$xt = XMT::Xtest::new(\%opt)		or die "$help_msg";
		$opt{srcbuf} = $xt->uninstrument();
	    }

	    # XHIST SECOND.
	    if ( defined $opt{'unxhist'} 
		and $XMT::Xkeyword::kw{'Branch'}{val} =~ /$opt{'unxhist'}/ )
	    {
		$xh = XMT::Xhist::new(\%opt)		or die "$help_msg";
		$opt{srcbuf} = $xh->uninstrument();
	    }

	    # KEYWORD EXPANSION LAST.
	    if ( defined $opt{'unexpand'} 
		and $XMT::Xkeyword::kw{'Branch'}{val} =~ /$opt{'unexpand'}/ )
	    {
		#constructor already called
		$opt{srcbuf} = $xk->unexpand();
	    }
	}
	else 
	{
	    die "bad command '$command'";
	}

	packet_txt_write("status=success");
	packet_flush();
	while ( length($opt{srcbuf}) > 0 )	#fragment buffer writes if necessary 
	{
	    $packet = substr( $opt{srcbuf}, 0, $MAX_PACKET_CONTENT_SIZE );
	    packet_bin_write($packet);
	    if ( length($opt{srcbuf}) > $MAX_PACKET_CONTENT_SIZE ) 
	    {
		$opt{srcbuf} = substr( $opt{srcbuf}, $MAX_PACKET_CONTENT_SIZE );
	    }
	    else 
	    {
		$opt{srcbuf} = "";
	    }
	}
	packet_flush();    	# flush content
	packet_flush();    	# empty list, keep "status=success" unchanged
    }
    $xh->printmap();		# print xhist mapfile only after all files done.	
}

#************************************************************************
# packet_read : read a packet via git filter protocol
#************************************************************************
sub packet_read 
{
   my ($buf, $pkt_size, $bytes_read);
 
    $bytes_read = read STDIN, $buf, 4;
    if ( $bytes_read == 0 ) 
    {

	# EOF - Git stopped talking to us!
	exit();
    }
    elsif ( $bytes_read != 4 ) 
    {
	die "invalid packet: '$buf'";
    }
    $pkt_size = hex($buf);
    if ( $pkt_size == 0 ) 
    {
	dbg_print("> 0000");
	return ( 1, "" );
    }
    elsif ( $pkt_size > 4 ) 
    {
	my $content_size = $pkt_size - 4;
	$bytes_read = read STDIN, $buf, $content_size;
	if ( $bytes_read != $content_size ) 
	{
	    die "invalid packet ($content_size bytes expected; $bytes_read bytes read)";
	}
	dbg_print("> $buf");
	return ( 0, $buf );
    }
    else 
    {
	die "invalid packet size: $pkt_size";
    }
}

#************************************************************************
# packet_bin_write : write a binary packet via git filter protocol
#************************************************************************
sub packet_bin_write 
{
    my $buf = shift;
    print STDOUT sprintf( "%04x", length($buf) + 4 );
    print STDOUT $buf;
    STDOUT->flush();
}

#************************************************************************
# packet_txt_write : write a ascii packet via git filter protocol
#************************************************************************
sub packet_txt_write 
{
    packet_bin_write( $_[0] . "\n" );
    dbg_print("< " . $_[0]);
}

#************************************************************************
# packet_flush : write the pre-defined flush packet via git filter protocol
#************************************************************************
sub packet_flush 
{
    print STDOUT sprintf( "%04x", 0 );
    STDOUT->flush();
    dbg_print("< 0000");
}

#************************************************************************
# dbg_print : write string to logfile
#************************************************************************
sub dbg_print
{
    my $str = shift;
    print LOG "$str\n" if fileno LOG;
}

