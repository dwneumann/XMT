#!/usr/bin/env perl
#************************************************************************
#*   $Version:$
#*   Package	: xmt_util
#*   Synopsis	: slocs [-v] [-csv] [-fi <regex>] [-fx <regex>] [-cx <regex>] [-fl <file>] <dir> ...
#*		 e.g.  slocs -f '*.java' src/
#*   Purpose	: 
#*	Perform source code metrics counts on all files matching the 
#*	pattern -f <regex> in each directory <dir> and all subdirectories 
#*  recursively, excluding those files and directories that match the regex
#*  pattern specified by -xf.  If -f and -xf are omitted,  all .c, .h, .cpp
#*  and .hpp files that do not include "test" in the basename are included.
#*  If -xc <regex> is specified all files which contain the pattern <regex> within
#*  their content are also excluded (e.g. -xc "GNU General Public License").
#*	If [-v] is specified each file and its metrics is echoed to stdout.
#*	If [-csv] is specified metrics are output in csv format.
#*
#*  Copyright (c) 1998	Neumann & Associates Information Systems Inc.
#*  			legal.info@neumann-associates.com
#*  Licensed under the Apache License, Version 2.0 (the "License");
#*  you may not use this file except in compliance with the License.
#*  You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#*  
#*  Unless required by applicable law or agreed to in writing, software
#*  distributed under the License is distributed on an "AS IS" BASIS,
#*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#*  See the License for the specific language governing permissions and
#*  limitations under the License. 
#************************************************************************/

use Getopt::Long;
use Cwd;
use List::Util 'sum';

($pgmname = $0) =~ s{.*/}{};
my $usage		= "usage: $pgmname [-v] [-csv] [-fi <regex>] [-fx <regex>] [-cx <regex>] [-fl <file>] <dir> ...\n";
my $help		= <<"END_HELP";
	$usage
	Aggregate source code metrics on all files matching the 
	pattern -fi <regex> in each directory <dir> and all subdirectories 
	recursively, excluding those files and directories that match the regex
	pattern specified by -fx.  
	-fi <regex> defaults to '\.(c|h|cpp|hpp)$' 
	-fx <regex> defaults to 'test'.
	(i.e. all .c, .h, .cpp and .hpp files that do not include "test" in the basename).
	If -cx <regex> is specified all files which contain the pattern <regex> within
	their content are also excluded (e.g. -cx "GNU General Public License").
	If -fl <file> is specified, the list of files to process is read from the specified file
	(e.g. find . -name "*.[ch]" -o -name "test" -prune > files.txt;  slocs -fl files.txt)
	Aggregated statistics are written to stdout.
	If [-v] is specified each file and its metrics is echoed to stdout (unaggregated).
	If [-csv] is specified the output is generated in csv format.
END_HELP

# unnecessary but shuts up -w
undef $opt_u;		
undef $opt_help;	
undef $opt_v;		
undef $opt_csv;		
undef $opt_cx;		
undef $opt_fl;		
undef $opt_fi;		
undef $opt_fx;		

GetOptions( "u", "v", "help", "csv", "fl=s", "fi=s", "fx=s", "cx=s" ) || die $usage;
die $usage if defined $opt_u;
die $help if defined $opt_help;
die "cannot specify both -fl and -fi\n" if defined $opt_fl and defined $opt_fi;
die "cannot specify both -fl and -fx\n" if defined $opt_fl and defined $opt_fx;
STDOUT->autoflush(1);

my $opt_fi	= '\.(c|h|cpp|hpp)$' if !defined $opt_fi;
my $opt_fx	= 'test';
my $cmd = ( defined $opt_csv ? "sloc -csv" : "sloc" );
my $field_separator = ( defined $opt_csv ? "," : ":" );
my $csv_headings = 'File,' . `sloc < /dev/null`;
$csv_headings =~ s/:[^\n]*\n/,/sg;
$csv_headings =~ s/,\n//;
my (%filecounts, @dirs, @srcs);

# read files from filelist or recursively scan directories in ARGV ...
if (defined $opt_fl)
{
    open my $fl, '<', $opt_fl or die "$opt_fl: $!\n";
	chomp(@srcs = <$fl>);
	close $fl;
}
else
{
	die $usage if $#ARGV < 0;
	@dirs = @ARGV;	
	while ( $#dirs >= 0 )
	{
		my $d = $dirs[0];
		@dirents = glob( "$d/*" );
		foreach my $f ( @dirents )
		{
			# save directories to recurse into or files to scan
			push( @dirs, $f ) and next if ( -d $f && $f !~ /^\.+$/ && $f !~ /$opt_fx/i );
			push( @srcs, $f ) if $f =~ /$opt_fi/ && $f !~ /$opt_fx/;	
		}
		shift @dirs;
	}
}
exit 0 if ($#srcs < 0);

open( CMD, "|$cmd" ) or die("$cmd: $!\n");	# spawn sloc cmd
print STDOUT "$csv_headings\n" if (defined $opt_csv);
while ( $#srcs >= 0 )
{
	my $f = $srcs[0];
    if ( -T $f )
	{
		open(BUF, $f) || warn("$f: $!\n");
		undef $/;
		$buf = <BUF>;			# read src file
		shift @srcs and next if (defined $opt_cx && $buf =~ /$opt_cx/);	

		(my $extension = $f) =~ s/.*\.//;
		$filecounts{$extension}++;
		printf( STDOUT "\n$f%s\n", $field_separator) if defined $opt_v;
		print CMD $buf;  # write to sloc's stdin
		close(BUF);				

		# if verbose mode, close & respawn sloc cmd for each file
		if ( defined $opt_v )
		{
			close(CMD);			# generate sloc's output
			open( CMD, "|$cmd" ) or die("$cmd: $!\n");	# spawn sloc cmd
		}
	}
	shift @srcs;
}
close(CMD);	# generate sloc's output

# output summary statistics of files processed
printf( STDOUT "\n%d files processed\n", sum values %filecounts ); 
foreach my $k (keys %filecounts)
{
	printf( STDOUT ".%s%s\t%d\n", $k, $field_separator, $filecounts{$k} ); 
}
exit 0;

