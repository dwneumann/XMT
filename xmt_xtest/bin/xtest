#!/bin/perl -w
#************************************************************************
#   $Version:$
#   Package	: xmt_xtest
#   Synopsis	: xtest [options] 
#   Purpose	: white box test harness: spawns IUTs under control of debuggers,
#	then uses Expect to manipulate/test IUT execution via debugger cmds.
#
#  Copyright 2018 Visionary Research Inc.   All rights reserved.
#  			legal@visionary-research.com
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#  
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License. 
#************************************************************************

use strict;

# perl expects to find the required XMT modules installed into
# the standard place that CPAN modules are installed:  
# this is found by running perl -V:installsitelib
# to instead use a develop version of the XMT::Xtest module
# uncomment the following line.
BEGIN {unshift(@INC, "$ENV{XMTXTEST}/bin");}
use XMT::Xtest;
use Getopt::Long;
use Env;

(my $pgmname = $0) =~ s{.*/}{};	# rootname of executed script
# construct the help message
my $help_msg = sprintf( <<__END__ );
$pgmname [<options>] [file]
  --iut=<cmd>   execute the program <cmd> with all specified arguments
  --test=<file> eval <file> for inputs & expected outputs to iut
  --log=<file>  log every command sent & received to/from iut to <file> 
  --verbose     echo PASS or FAIL of individual commands
__END__

# parse commandline options
my %opt = ();
GetOptions( \%opt, "help", "iut=s", "test=s", "log=s", "verbose" ) or die $help_msg;
die "$help_msg" if defined $opt{help};
die "$help_msg" if !defined $opt{iut} or !defined $opt{test};

# instantiate & run the testfile against the iut
my $xt = XMT::Xtest::new(\%opt)	or die "XMT::Xtest : $Xtest::errstr\n";	
my $result = $xt->run()		or die "XMT::Xtest : $Xtest::errstr\n";
printf("\n%s\t%s\n", $opt{test}, $result);
# make exit code reflect pass/fail status.
exit( $result =~ $Xtest::PASS ? 0 : 1);

