#************************************************************************
#*   $Version:$
#*   Package	: build
#*   Synopsis	: include $(XMTBUILD)/proto/Makefile.top
#*   Purpose	: 
#*              This Makefile contains top-level standard make rules
#*              and flags; ie those which are imposed upon all
#*              projects undertaken within this organization. It is
#*              intended to be included by all Makefiles within the
#*              organization.  
#*              To add support for a new language,  create a new
#*              lang/<language> subdirectory, copy an existing
#*              lang/<language>/generic.inc file to the new
#*              subdirectory, and modify as necessary. 
#*              To add support for a new target architecture, copy an
#*              existing lang/<language>/<architecture>.inc file to
#*              lang/<language>/<newarchitecture>.inc, and modify as
#*              necessary.
#*
#*  Copyright (c) 1998	Neumann & Associates Information Systems Inc.
#*  			legal.info@neumann-associates.com
#*  Licensed under the Apache License, Version 2.0 (the "License");
#*  you may not use this file except in compliance with the License.
#*  You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#*  
#*  Unless required by applicable law or agreed to in writing, software
#*  distributed under the License is distributed on an "AS IS" BASIS,
#*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#*  See the License for the specific language governing permissions and
#*  limitations under the License. 
#************************************************************************

#**********************************************************************
# lower-case variables are for internal use only;
# these not intended to be user-changable...
#   := assignements are evaluated during lexical scan;
#    = assignemtns are recursively evaluated during rule parsing
#**********************************************************************
shell		= /bin/bash
SHELL		= $(shell)
pkg_dir		= $(shell cd ..;pwd)
supp_langs	= $(notdir $(wildcard $(XMTBUILD)/proto/lang/*))
allsrcs		= $(sort $(foreach e,$(supp_langs),$(srcs.$(e))))

#**********************************************************************
# Upper-case variables may be specified on the commandline or these
# defaults may be overridden in individual project-level or
# package-level Makefiles.
#**********************************************************************
MAKE		= make
MAKEDEPEND	= makedepend
ARCH		= $(XMTBUILD_DFLT_ARCH)
SRCDIR		= ../src
TESTDIR		= ../test
DOCDIR		= ../doc
DATADIR		= ../data
CMSOURCES	= co -u SVN/*
CMCLEAN		= svn update -P -d *
JAVA_PKGTREE	= .
PKG_NM		= $(notdir $(pkg_dir))
PKG_TGT         = lib
OBJDIR		= ../obj/$(ARCH)
TGTDIR		= ../tgt/$(ARCH)
LIB_NM          = $(LIB_PFX.$(LANGUAGE).$(ARCH))$(PKG_NM)$(LIB_SFX.$(LANGUAGE).$(ARCH))
EXE_NM          = $(EXE_PFX.$(LANGUAGE).$(ARCH))$(PKG_NM)$(EXE_SFX.$(LANGUAGE).$(ARCH))
LANGUAGE	= c
BUILD_TGT	= all
.DEFAULT	= build

#**********************************************************************
# This is the place to define flags that are common to ALL 
# supported architectures for ALL supported languages.
#**********************************************************************
CFLAGS		=		
LDFLAGS		=		
ARFLAGS		=
LINTFLAGS	=
DOCFLAGS	=

#**********************************************************************
# Now include:
# language & architecture-specific Makefiles:
# project-level Makefile, then
# package-level ./Makefile.pkg
# recursive variables are evaluated when a matching recipe is found.
#**********************************************************************

-include ./Makefile.pkg	
-include $(PROJECT)/proto/Makefile.top
-include $(XMTBUILD)/proto/lang/$(LANGUAGE)/generic.inc
-include $(XMTBUILD)/proto/lang/$(LANGUAGE)/$(ARCH).inc

all: $(PKG_TGT)
depend: 
	(cd $(SRCDIR); \
	$(MAKEDEPEND) -Y -p$(TGTDIR)/ -o.$(LANGUAGE).$(OBJ_SFX.$(LANGUAGE).$(ARCH)) -- \
	$(CFLAGS) $(CFLAGS.$(LANGUAGE)) \
	$(CFLAGS.$(LANGUAGE).$(ARCH)) $(notdir $(srcs.$(LANGUAGE))) \
	>/dev/null 2>&1 )

clean:
	-/bin/rm $(OBJDIR)/* $(TGTDIR)/*

sources:	
	(cd $(SRCDIR); $(CMSOURCES))

lint:	$(lnts.$(LANGUAGE))
doc:	$(docs.$(LANGUAGE))
objs: $(objs.$(LANGUAGE)) $(EXTRA_OBJS)
lib:	.lib.$(LANGUAGE)
exe:	.exe.$(LANGUAGE)


ifneq "$(tgtdir)" "$(srcdir)"
$(tgtdir)/%	:: $(srcdir)/%	; /bin/mv $< $@
endif
ifneq "$(docdir)" "$(srcdir)"
$(docdir)/%	:: $(srcdir)/%	; /bin/mv $< $@
endif

#**********************************************************************
# "build" recursively makes all packages upon which a package
# depends, (as specified by the variable $(BUILD_PKGS),  then makes
# the target defined by variable $(BUILD_TGT) in the package
# itself.
#**********************************************************************
ifneq "$(strip $(BUILD_PKGS))" ""
reqd_pkgs := $(BUILD_PKGS)
$(reqd_pkgs):
	$(MAKE) -w -C $@/src PWD=$@/src build;
endif
build: $(reqd_pkgs) $(BUILD_TGT)

#**********************************************************************
# "showflags" (or "show") simply echoes the value of the programs
# and flags to be used for the specified language and architecture.
#**********************************************************************
show printflags: 
	@echo LANGUAGE = $(LANGUAGE)
	@echo ARCH = $(ARCH)
	@echo srcs.$(LANGUAGE) = $(srcs.$(LANGUAGE))
	@echo objs.$(LANGUAGE) = $(objs.$(LANGUAGE))
	@echo lnts.$(LANGUAGE) = $(lnts.$(LANGUAGE))
	@echo docs.$(LANGUAGE) = $(docs.$(LANGUAGE))
	@echo
	@echo COMPILE.$(LANGUAGE).$(ARCH) =  $(COMPILE.$(LANGUAGE).$(ARCH))
	@echo CFLAGS = $(CFLAGS)
	@echo CFLAGS.$(LANGUAGE) = $(CFLAGS.$(LANGUAGE))
	@echo CFLAGS.$(LANGUAGE).$(ARCH) = $(CFLAGS.$(LANGUAGE).$(ARCH))
	@echo
	@echo AR.$(LANGUAGE).$(ARCH) =  $(AR.$(LANGUAGE).$(ARCH))
	@echo ARFLAGS = $(ARFLAGS)
	@echo ARFLAGS.$(LANGUAGE) = $(ARFLAGS.$(LANGUAGE))
	@echo ARFLAGS.$(LANGUAGE).$(ARCH) = $(ARFLAGS.$(LANGUAGE).$(ARCH))
	@echo
	@echo LD.$(LANGUAGE).$(ARCH) =  $(LD.$(LANGUAGE).$(ARCH))
	@echo LDFLAGS = $(LDFLAGS)
	@echo LDFLAGS.$(LANGUAGE)  = $(LDFLAGS.$(LANGUAGE) )
	@echo LDFLAGS.$(LANGUAGE).$(ARCH) = $(LDFLAGS.$(LANGUAGE).$(ARCH))
	@echo
	@echo LINT.$(LANGUAGE).$(ARCH) =  $(LINT.$(LANGUAGE).$(ARCH))
	@echo LINTFLAGS = $(LINTFLAGS)
	@echo LINTFLAGS.$(LANGUAGE) = $(LINTFLAGS.$(LANGUAGE))
	@echo LINTFLAGS.$(LANGUAGE).$(ARCH) = $(LINTFLAGS.$(LANGUAGE).$(ARCH))
	@echo
	@echo DOC.$(LANGUAGE).$(ARCH) =  $(DOC.$(LANGUAGE).$(ARCH))
	@echo DOCFLAGS = $(DOCFLAGS)
	@echo DOCFLAGS.$(LANGUAGE) = $(DOCFLAGS.$(LANGUAGE))
	@echo DOCFLAGS.$(LANGUAGE).$(ARCH) = $(DOCFLAGS.$(LANGUAGE).$(ARCH))
	@echo

printvars:
	@$(foreach V,$(sort $(.VARIABLES)), $(warning $V=$($V) ($(value $V))))
